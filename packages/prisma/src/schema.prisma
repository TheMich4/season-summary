generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Season {
  id         Int          @id @default(autoincrement())
  isOver     Boolean      @default(false)
  season     Int
  year       Int
  category   Int
  seasonData SeasonData[]

  @@unique([year, season, category])
}

model SeasonData {
  id         Int      @id @default(autoincrement())
  isPending  Boolean  @default(false)
  lastRace   String?
  lastUpdate DateTime @default(now())
  seasonId   Int
  userId     Int
  data       Data?
  season     Season   @relation(fields: [seasonId], references: [id], onDelete: Cascade)

  @@unique([seasonId, userId])
  @@index([seasonId])
  @@index([userId])
}

model Data {
  id           Int         @id @default(autoincrement())
  lastUpdate   DateTime    @default(now())
  json         Json?
  seasonDataId Int         @unique
  finalIRating Int?
  stats        Json?
  seasonData   SeasonData? @relation(fields: [seasonDataId], references: [id], onDelete: Cascade)
}

model IracingUser {
  iracingId Int @id
}

model Account {
  id                String  @id
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id
  sessionToken String   @unique
  userId       String
  expires      DateTime

  @@index([userId])
}

model User {
  id               String    @id
  name             String?
  email            String?   @unique
  emailVerified    DateTime?
  image            String?
  iracingId        String?
  isAdmin          Boolean   @default(false)
  preferFull       Boolean   @default(false)
  favoriteCategory String    @default("road")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
